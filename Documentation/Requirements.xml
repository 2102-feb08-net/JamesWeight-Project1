<?xml version="1.0" encoding="UTF-8"?>
<summary><header>Project 1 requirements</header>
           <details>project 1: store web application</details>
           <details>Feb 8 2021 Arlington .NET / Nick Escalona</details>

         <section>[Functionality]</section>
           <details>  1) place orders to store locations for customers<details>
           <details>  2) add a new customer</details>
           <details>  3) search customers by name</details>
           <details>  4) display details of an order</details>
           <details>  5) display all order history of a store location</details>
           <details>  6) display all order history of a customer</details>
           <details>  7) client-side validation [new]</details>
           <details>  8) server-side validation [new]</details>
           <details>  9) exception handling</details>
           <details> 10) persistent data; no prices, customers, order history, etc. hardcoded in C#</details>
           <details> 11) logging of exceptions, EF SQL commands, and other events [newly required]</details>

          <article>(optional: order history can be sorted by earliest, latest, cheapest, most expensive)
                   (optional: get a suggested order for a customer based on his order history)
                   (optional: display some statistics based on order history)
                   (optional: asynchronous network & file I/O)</article>

[Design]
 1) use EF Core (either database-first approach with a SQL script or code-first approach with migrations) [newly changed]
 2) use an Azure SQL DB in third normal form
 3) don't use public fields
 4) define and use at least one interface

[Core / Domain / Business Logic]
 1) class library
 2) contains all business logic
 3) contains domain classes (customer, order, store, product, etc.)
 4) documentation with <summary> XML comments on all public types and members (optional: <params> and <return>
 5) customer has first name, last name, etc.

(recommended: has no dependency on UI, data access, or any input/output considerations)
(optional: has a default store location to order from)

[Order]
 1) has a store location
 2) has a customer
 3) has an order time (when the order was placed)
 4) can contain multiple kinds of product in the same order
 5) rejects orders with unreasonably high product quantities
 6) location has an inventory
 7) inventory decreases when orders are accepted
 8) rejects orders that cannot be fulfilled with remaining inventory

(optional: some additional business rules, like special deals)
(optional: for at least one product, more than one inventory item decrements when ordering that product)

[Product (etc.)];

[Web Api (new)]
 2) ASP.NET Core web API
 3) serve static HTML, CSS, JS, image, etc. files
 4) communicate with the server and manage the page via JS
 5) receive and respond to AJAX requests
 6) use dependency injection with controllers, repositories, the context, and other services
 7) has only HTTP-related code
 8) data access
 9) class library
10) separate project for data access code using EF Core
11) contains data access logic but no business logic
12) use repository pattern for separation of concerns

[Test]
 1) at least 10 test methods
 2) focus on unit testing business logic
 3) data access tests (if present) should not impact the app's actual database [new]

===========

To Team: Was there any other additional requirements inferred by Nick other than

A) Must Be Responsive in UA (Browser)
B) Adaptible to Browser Platforms (Desktop, Tablet, SmartPhones)
C) On Azure Cloud as Accessible to the Public in Operational Tasks for a Business or as a Confirmation of Database Activity

